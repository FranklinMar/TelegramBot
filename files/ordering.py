import re
from aiogram import types
from dispatcher import dp, bot
from DatabaseFunctions import select_by_id_db
from Factory import Factory
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton

from files.bot import kb

factory = Factory("database.db")


@dp.message_handler(lambda message: message.text == "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—èüíµ")
async def process_order(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å", reply_markup=InlineKeyboardMarkup().add(
                                       InlineKeyboardButton(f'–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
                                                            callback_data=f'not_paid')).add(
                                       InlineKeyboardButton(f'–û–ø–ª–∞—á–µ–Ω–æ',
                                                            callback_data=f'paid')))


@dp.callback_query_handler(text="not_paid")
async def show_orders(call: CallbackQuery):
    orders = factory.get_ordering(call.from_user.id, False)
    price = 0
    if not orders:
        await call.message.answer("‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è‚ö†Ô∏è –¢—É—Ç –Ω–µ–º–∞—î –Ω—ñ—á–æ–≥–æ... ‚ö†Ô∏è ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è", reply_markup=kb)
    else:
        for order in orders:
            full_products = factory.get_full_product(order[1])
            product = select_by_id_db(full_products[0][1])
            price += product[3]*order[4]
            await bot.send_photo(call.from_user.id, photo=product[5])
            await bot.send_message(call.from_user.id,
                                   f'{product[1]}\n–û–ø–∏—Å: {product[2]}\n–¶—ñ–Ω–∞: {product[3] * order[4]} –ö–æ–ª—ñ—Ä: {full_products[0][3]} –†–æ–∑–º—ñ—Ä: {full_products[0][2]} –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order[4]}',
                                   reply_markup=InlineKeyboardMarkup().add(
                                       InlineKeyboardButton(f'–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚ùå',
                                                            callback_data=f'Del {order[0]}')))
            await call.message.answer(f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {price}üí∏\n–î–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É‚¨áÔ∏è", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏")).add(KeyboardButton("üîô–ù–∞–∑–∞–¥")))


@dp.callback_query_handler(lambda c: re.match('Del [0-9]+', c.data))
async def process_deleting(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    ids = int(callback_query.data.split()[1])
    if ids:
        factory.connector.execute(f"DELETE FROM Ordering WHERE id = {ids};")
        factory.connector.commit()
        await callback_query.message.answer(text=f'‚úÖ –ü—Ä–æ–¥—É–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ')
        await show_orders(callback_query)
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùå –ü—Ä–æ–¥—É–∫—Ç—É –Ω–µ–º–∞—î –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ. ‚ùå")
