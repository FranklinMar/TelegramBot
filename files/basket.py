import datetime
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from files.bot import process_start_command
from dispatcher import dp, bot
from aiogram.dispatcher import FSMContext
from dispatcher import factory as factory
from aiogram.dispatcher.filters.state import StatesGroup, State
from DatabaseFunctions import select_by_id_db
import re


class AmountRegister(StatesGroup):
    amount = State()


@dp.message_handler(state=AmountRegister.amount)
async def amount_input(message: types.Message, state: FSMContext):
    if message.text == "–í–∏–π—Ç–∏" or message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await show_basket(message)
        return
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ ‚ùå\n‚ö†Ô∏è–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è, –≤–≤–µ–¥—ñ—Ç—å '–í–∏–π—Ç–∏', '–ù–∞–∑–∞–¥' –∞–±–æ '0' ")
        return
    if amount < 0:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é ‚ùå")
        return
    if amount == 0:
        await state.finish()
        await show_basket(message)
        return
    async with state.proxy() as data:
        idFull = data['idFull']
    if amount > factory.cursor.execute(f"SELECT count FROM FullProduct WHERE idFull = {idFull};").fetchone()[0]:
        await message.answer("‚ùå Error! The amount is bigger than storage capacity ‚ùå")
        return
    sql = "INSERT INTO Ordering (idFull, idProfile, pay, count, date) VALUES (?, ?, ?, ?, ?);"
    factory.connector.execute(sql, (idFull, message.from_user.id, False, amount, datetime.date.today()))
    factory.connector.commit()
    factory.connector.execute(f"UPDATE FullProduct SET count = count - {amount} WHERE idFull = {idFull};")
    factory.connector.commit()
    await state.finish()
    await message.answer(text=f'‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. ‚úÖ',
                               reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚¨áÔ∏è Back',
                                                                                        callback_data='basket')))


@dp.message_handler(lambda message: message.text == "–ö–æ—Ä–∑–∏–Ω–∞üëú")
async def show_basket(message):
    basket = [select_by_id_db(i[0]) for i in factory.cursor.execute(f"SELECT idProduct FROM Basket WHERE idProfile = "
                                                         f"{message.from_user.id};")]
    if len(basket) == 0:
        await bot.send_message(message.from_user.id, "Ô∏è‚ö†Ô∏è –¢—É—Ç —Ç–∞–∫ –ø—É—Å—Ç–æ... ‚ö†Ô∏è ", reply_markup=
        InlineKeyboardMarkup().add(InlineKeyboardButton('‚¨áÔ∏è –ù–∞–∑–∞–¥', callback_data=f'startMenu')))
    else:
        await bot.send_message(message.from_user.id, "---–í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞---", reply_markup=ReplyKeyboardRemove())
        for i in basket:
            await bot.send_photo(message.from_user.id, photo=i[5])
            await bot.send_message(message.from_user.id, f'{i[1]}\n–û–ø–∏—Å: {i[2]}\n–¶—ñ–Ω–∞: {i[3]}',
                                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(f'–î–æ–¥–∞—Ç–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ‚è©üü¢',
                                callback_data=f'Add {i[0]}')).add(InlineKeyboardButton(f'–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—Ä–∑–∏–Ω–∏ ‚ùå',
                                callback_data=f'Delete {i[0]}')))
        await bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=InlineKeyboardMarkup()
                               .add(InlineKeyboardButton('‚¨áÔ∏è –ù–∞–∑–∞–¥', callback_data=f'startMenu')))


@dp.callback_query_handler(lambda c: re.match('Add [0-9]+', c.data))
async def process_color(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    keyboard = InlineKeyboardMarkup()
    factory.cursor.execute(f"SELECT color FROM FullProduct WHERE idProduct = {callback_query.data.split()[1]} AND "
                f"count > 0 GROUP BY color;")
    temp = factory.cursor.fetchall()
    if temp:
        for i in temp:
            keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'Size {callback_query.data.split()[1]}'
                                                                            f' {i[0]}'))
        keyboard.add(InlineKeyboardButton(text='‚¨áÔ∏è –ù–∞–∑–∞–¥', callback_data='basket'))
        await bot.send_message(callback_query.from_user.id, 'üü®üü• –û–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä —Ç–æ–≤–∞—Ä—É üü©üü¶',
                               reply_markup=keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, 'üö´ –í–∏–±–∞—á—Ç–µ, —Ü–µ–π —Ç–æ–≤–∞—Ä –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É. üö´\n'
                                                            '‚ö†Ô∏è–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
                               reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚¨áÔ∏è –ù–∞–∑–∞–¥',
                                                                                            callback_data='basket')))


@dp.callback_query_handler(lambda c: re.match('Size [0-9]+ [A-Za-z]+', c.data))
async def process_size(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    keyboard = InlineKeyboardMarkup()
    factory.cursor.execute(f"SELECT idFull, size FROM FullProduct WHERE idProduct = {callback_query.data.split()[1]} "
                           f"AND count > 0 AND color = '{callback_query.data.split()[2]}';")
    temp = factory.cursor.fetchall()
    if temp:
        for i in temp:
            keyboard.add(InlineKeyboardButton(text=f'{i[1]}', callback_data=f'Count '
                                        f'{callback_query.data.split()[1]} {callback_query.data.split()[2]} {i[0]}'))
        keyboard.add(InlineKeyboardButton(text='‚¨áÔ∏è –ù–∞–∑–∞–¥', callback_data='basket'))
        await bot.send_message(callback_query.from_user.id, 'üëïüëñüß• –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —Ç–æ–≤–∞—Ä—É üëûüëüüß§',
                               reply_markup=keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, 'üö´ –í–∏–±–∞—á—Ç–µ, —Ü–µ–π —Ç–æ–≤–∞—Ä –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É. üö´\n'
                                                            '‚ö†Ô∏è–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
                               reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚¨áÔ∏è –ù–∞–∑–∞–¥',
                                                                                            callback_data='basket')))


@dp.callback_query_handler(lambda c: re.match('Count [0-9]+ [A-Za-z]+ [0-9]+', c.data))
async def process_count(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    factory.cursor.execute(f"SELECT count FROM FullProduct WHERE idFull = {callback_query.data.split()[3]};")
    instance = factory.cursor.fetchone()
    if instance[0] > 0:
        await bot.send_message(callback_query.from_user.id, f"‚ÑπÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ : {instance[0]}\n\n"
                                                            f"‚úîÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üî¢")
        async with state.proxy() as data:
            data['idFull'] = callback_query.data.split()[3]

        await AmountRegister.amount.set()
    else:
        await bot.send_message(callback_query.from_user.id, 'üö´ –í–∏–±–∞—á—Ç–µ, —Ü–µ–π —Ç–æ–≤–∞—Ä –≤–∏—á–µ—Ä–ø–∞–Ω–æ –∑—ñ —Å–∫–ª–∞–¥—É. üö´\n'
                                                            '‚ö†Ô∏è–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
                               reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚¨áÔ∏è –ù–∞–∑–∞–¥',
                                                                                            callback_data='basket')))


@dp.callback_query_handler(lambda c: re.match('Delete [0-9]+', c.data))
async def process_deleting(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    ids = int(callback_query.data.split()[1])
    factory.cursor.execute(f"SELECT idBasket, idProduct FROM Basket WHERE idProfile = {callback_query.from_user.id} "
                f"AND idProduct = {ids};")
    ids = factory.cursor.fetchone()
    if ids:
        factory.connector.execute(f"DELETE FROM Basket WHERE idBasket = {ids[0]};")
        factory.connector.commit()
        await bot.send_message(callback_query.from_user.id, '‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –í–∞—à–æ—ó –∫–æ—Ä–∑–∏–Ω–∏. ‚úÖ',
                               reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚¨áÔ∏è –ù–∞–∑–∞–¥',
                                                                                            callback_data='basket')))
    else:
        await bot.send_message(callback_query.from_user.id, "‚ùå –¶—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞—î —É –≤–∞—à—ñ–π –∫–æ—Ä–∑–∏–Ω—ñ. ‚ùå",
                               reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚¨áÔ∏è –ù–∞–∑–∞–¥',
                                                                                            callback_data='basket')))


@dp.callback_query_handler(lambda c: "startMenu" == c.data)
async def process_redirect(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await process_start_command(callback_query.message)


@dp.callback_query_handler(lambda c: "basket" == c.data)
async def process_basket(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await show_basket(callback_query)
