
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dispatcher import factory as factory
from files.bot import kb
import phonenumbers

from dispatcher import dp




class UserRegister(StatesGroup):
    surname = State()
    name = State()
    patronymic = State()
    phone_number = State()


class UserEdit(StatesGroup):
    surname = State()
    name = State()
    patronymic = State()
    phone_number = State()


change = ReplyKeyboardMarkup(resize_keyboard=True)
change.row(KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ"))


@dp.message_handler(commands=['reg'])
async def register_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ:",
                         reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")))
    await UserRegister.surname.set()


@dp.message_handler(state=UserRegister.surname)
async def surname_input(message: types.Message, state: FSMContext):
    if message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await cancel(message, state)
        return
    await state.update_data(surname=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è:")
    await UserRegister.name.set()


@dp.message_handler(state=UserRegister.name)
async def name_input(message: types.Message, state: FSMContext):
    if message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await cancel(message, state)
        return
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ:")
    await UserRegister.patronymic.set()


@dp.message_handler(state=UserRegister.patronymic)
async def patron_input(message: types.Message, state: FSMContext):
    if message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await cancel(message, state)
        return
    await state.update_data(patronymic=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await UserRegister.phone_number.set()


@dp.message_handler(state=UserRegister.phone_number)
async def phone_number_input(message: types.Message, state: FSMContext):
    if message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await cancel(message, state)
        return
    try:
        phone_number = phonenumbers.parse(message.text)
    except phonenumbers.NumberParseException:
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–ø—Ä–∞–≤–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–πüòî")
        return
    if not phonenumbers.is_possible_number(phone_number):
        await message.answer("–ü–æ–º–∏–ª–∫–∞! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–ø—Ä–∞–≤–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–πüòî")
        return

    await state.update_data(phone_number=message.text)
    new_user = await state.get_data()

    sql = f"UPDATE Profile SET surname = ?, name = ?, patronymic = ?, phone_number = ? WHERE id = ?;"
    data = (new_user["surname"], new_user["name"], new_user["patronymic"], new_user["phone_number"], message.from_user.id)
    factory.cursor.execute(sql, data)
    factory.connector.commit()
    await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚úÖ")
    await state.finish()
    await profile(message)


@dp.message_handler(Text(equals="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é",
                         reply_markup=kb)


@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Ñ—ñ–ª—åüôé‚Äç‚ôÇÔ∏èüôç‚Äç‚ôÄÔ∏è")
async def profile(message: types.Message):
    if my_profile(message.from_user.id):
        await message.answer(my_profile(message.from_user.id), reply_markup=change)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –±—É–¥—å –ª–∞—Å–∫–∞")
        await register_start(message)


def my_profile(id):
    profiles = factory.cursor.execute(f"SELECT * FROM Profile WHERE id = {id};").fetchall()
    for profile in profiles:
        if profile[1]:
            return f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å :\n–Ü–º'—è: {profile[1]}\n–ü—Ä—ñ–∑–≤–∏—â–µ: {profile[2]}\n–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ: {profile[3]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {profile[4]}\n–í–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å?"
        else:
            return None


@dp.message_handler(text="–ù—ñ")
async def no(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é", reply_markup=kb)


@dp.message_handler(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")
async def otmena(message: types.Message, state: FSMContext):
    await state.finish()
    await profile(message)


@dp.message_handler(text="–¢–∞–∫")
async def yes(message: types.Message):
    edits = InlineKeyboardMarkup()
    edits.add(InlineKeyboardButton(text="–Ü–º'—è", callback_data="edit_Name"))
    edits.add(InlineKeyboardButton(text="–ü—Ä—ñ–∑–≤–∏—â–µ", callback_data="edit_Surname"))
    edits.add(InlineKeyboardButton(text="–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ", callback_data="edit_Patronymic"))
    edits.add(InlineKeyboardButton(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="edit_Phonenumber"))
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏—Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:", reply_markup=edits)


@dp.callback_query_handler(lambda call: call.data.startswith('edit'))
async def callback_worker_promo(call: CallbackQuery):
    model_type, object = call.data.split("_")
    if object == "Name":
        await call.message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")))
        await UserEdit.name.set()
    if object == "Surname":
        await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")))
        await UserEdit.surname.set()
    if object == "Patronymic":
        await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")))
        await UserEdit.patronymic.set()
    if object == "Phonenumber":
        await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")))
        await UserEdit.phone_number.set()


@dp.message_handler(state=UserEdit.name)
async def name(message: types.Message, state: FSMContext):
    if message.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await otmena(message,state)
        return
    factory.cursor.execute("UPDATE Profile SET name = ? WHERE id = ?;", (message.text, message.from_user.id))
    factory.connector.commit()
    await state.finish()
    await profile(message)


@dp.message_handler(state=UserEdit.surname)
async def name(message: types.Message, state: FSMContext):
    if message.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await otmena(message,state)
        return
    factory.cursor.execute("UPDATE Profile SET surname = ? WHERE id = ?;", (message.text, message.from_user.id))
    factory.connector.commit()
    await state.finish()
    await profile(message)


@dp.message_handler(state=UserEdit.patronymic)
async def name(message: types.Message, state: FSMContext):
    if message.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await otmena(message,state)
        return
    factory.cursor.execute("UPDATE Profile SET patronymic = ? WHERE id = ?;", (message.text, message.from_user.id))
    factory.connector.commit()
    await state.finish()
    await profile(message)


@dp.message_handler(state=UserEdit.phone_number)
async def name(message: types.Message, state: FSMContext):
    if message.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await otmena(message,state)
        return
    try:
        phone_number = phonenumbers.parse(message.text)
    except phonenumbers.NumberParseException:
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–ø—Ä–∞–≤–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–πüòî")
        return
    if not phonenumbers.is_possible_number(phone_number):
        await message.answer("–ü–æ–º–∏–ª–∫–∞! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–ø—Ä–∞–≤–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∏–πüòî")
        return

    factory.cursor.execute("UPDATE Profile SET phone_number = ? WHERE id = ?;", (message.text, message.from_user.id))
    factory.connector.commit()
    await state.finish()
    await profile(message)
